// Code generated by MockGen. DO NOT EDIT.
// Source: dataset/dataset.go

// Package dataset is a generated GoMock package.
package dataset

import (
	gomock "github.com/golang/mock/gomock"
	math "github.com/marekgalovic/tau/pkg/math"
	protobuf "github.com/marekgalovic/tau/pkg/protobuf"
	utils "github.com/marekgalovic/tau/pkg/utils"
	reflect "reflect"
)

// MockDataset is a mock of Dataset interface
type MockDataset struct {
	ctrl     *gomock.Controller
	recorder *MockDatasetMockRecorder
}

// MockDatasetMockRecorder is the mock recorder for MockDataset
type MockDatasetMockRecorder struct {
	mock *MockDataset
}

// NewMockDataset creates a new mock instance
func NewMockDataset(ctrl *gomock.Controller) *MockDataset {
	mock := &MockDataset{ctrl: ctrl}
	mock.recorder = &MockDatasetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataset) EXPECT() *MockDatasetMockRecorder {
	return m.recorder
}

// Meta mocks base method
func (m *MockDataset) Meta() *protobuf.Dataset {
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(*protobuf.Dataset)
	return ret0
}

// Meta indicates an expected call of Meta
func (mr *MockDatasetMockRecorder) Meta() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockDataset)(nil).Meta))
}

// Search mocks base method
func (m *MockDataset) Search(arg0 int32, arg1 math.Vector) ([]*protobuf.SearchResultItem, error) {
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].([]*protobuf.SearchResultItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockDatasetMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDataset)(nil).Search), arg0, arg1)
}

// SearchPartitions mocks base method
func (m *MockDataset) SearchPartitions(arg0 int32, arg1 math.Vector, arg2 []string) ([]*protobuf.SearchResultItem, error) {
	ret := m.ctrl.Call(m, "SearchPartitions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*protobuf.SearchResultItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPartitions indicates an expected call of SearchPartitions
func (mr *MockDatasetMockRecorder) SearchPartitions(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPartitions", reflect.TypeOf((*MockDataset)(nil).SearchPartitions), arg0, arg1, arg2)
}

// LocalPartitions mocks base method
func (m *MockDataset) LocalPartitions() []interface{} {
	ret := m.ctrl.Call(m, "LocalPartitions")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// LocalPartitions indicates an expected call of LocalPartitions
func (mr *MockDatasetMockRecorder) LocalPartitions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalPartitions", reflect.TypeOf((*MockDataset)(nil).LocalPartitions))
}

// BuildPartitions mocks base method
func (m *MockDataset) BuildPartitions(arg0 utils.Set) error {
	ret := m.ctrl.Call(m, "BuildPartitions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildPartitions indicates an expected call of BuildPartitions
func (mr *MockDatasetMockRecorder) BuildPartitions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildPartitions", reflect.TypeOf((*MockDataset)(nil).BuildPartitions), arg0)
}

// DeletePartitions mocks base method
func (m *MockDataset) DeletePartitions(arg0 utils.Set) error {
	ret := m.ctrl.Call(m, "DeletePartitions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePartitions indicates an expected call of DeletePartitions
func (mr *MockDatasetMockRecorder) DeletePartitions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartitions", reflect.TypeOf((*MockDataset)(nil).DeletePartitions), arg0)
}

// DeleteAllPartitions mocks base method
func (m *MockDataset) DeleteAllPartitions() error {
	ret := m.ctrl.Call(m, "DeleteAllPartitions")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllPartitions indicates an expected call of DeleteAllPartitions
func (mr *MockDatasetMockRecorder) DeleteAllPartitions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllPartitions", reflect.TypeOf((*MockDataset)(nil).DeleteAllPartitions))
}
