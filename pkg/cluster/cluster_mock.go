// Code generated by MockGen. DO NOT EDIT.
// Source: cluster/cluster.go

// Package cluster is a generated GoMock package.
package cluster

import (
	gomock "github.com/golang/mock/gomock"
	utils "github.com/marekgalovic/tau/pkg/utils"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockCluster is a mock of Cluster interface
type MockCluster struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMockRecorder
}

// MockClusterMockRecorder is the mock recorder for MockCluster
type MockClusterMockRecorder struct {
	mock *MockCluster
}

// NewMockCluster creates a new mock instance
func NewMockCluster(ctrl *gomock.Controller) *MockCluster {
	mock := &MockCluster{ctrl: ctrl}
	mock.recorder = &MockClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCluster) EXPECT() *MockClusterMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockCluster) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockClusterMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCluster)(nil).Close))
}

// Uuid mocks base method
func (m *MockCluster) Uuid() string {
	ret := m.ctrl.Call(m, "Uuid")
	ret0, _ := ret[0].(string)
	return ret0
}

// Uuid indicates an expected call of Uuid
func (mr *MockClusterMockRecorder) Uuid() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uuid", reflect.TypeOf((*MockCluster)(nil).Uuid))
}

// ListNodes mocks base method
func (m *MockCluster) ListNodes() ([]Node, error) {
	ret := m.ctrl.Call(m, "ListNodes")
	ret0, _ := ret[0].([]Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes
func (mr *MockClusterMockRecorder) ListNodes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockCluster)(nil).ListNodes))
}

// GetNode mocks base method
func (m *MockCluster) GetNode(arg0 string) (Node, error) {
	ret := m.ctrl.Call(m, "GetNode", arg0)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode
func (mr *MockClusterMockRecorder) GetNode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockCluster)(nil).GetNode), arg0)
}

// GetHrwNode mocks base method
func (m *MockCluster) GetHrwNode(arg0 string) (Node, error) {
	ret := m.ctrl.Call(m, "GetHrwNode", arg0)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHrwNode indicates an expected call of GetHrwNode
func (mr *MockClusterMockRecorder) GetHrwNode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHrwNode", reflect.TypeOf((*MockCluster)(nil).GetHrwNode), arg0)
}

// GetTopHrwNodes mocks base method
func (m *MockCluster) GetTopHrwNodes(arg0 int, arg1 string) (utils.Set, error) {
	ret := m.ctrl.Call(m, "GetTopHrwNodes", arg0, arg1)
	ret0, _ := ret[0].(utils.Set)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopHrwNodes indicates an expected call of GetTopHrwNodes
func (mr *MockClusterMockRecorder) GetTopHrwNodes(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopHrwNodes", reflect.TypeOf((*MockCluster)(nil).GetTopHrwNodes), arg0, arg1)
}

// NodeChanges mocks base method
func (m *MockCluster) NodeChanges() <-chan interface{} {
	ret := m.ctrl.Call(m, "NodeChanges")
	ret0, _ := ret[0].(<-chan interface{})
	return ret0
}

// NodeChanges indicates an expected call of NodeChanges
func (mr *MockClusterMockRecorder) NodeChanges() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeChanges", reflect.TypeOf((*MockCluster)(nil).NodeChanges))
}

// DialNode mocks base method
func (m *MockCluster) DialNode(arg0 string) (*grpc.ClientConn, error) {
	ret := m.ctrl.Call(m, "DialNode", arg0)
	ret0, _ := ret[0].(*grpc.ClientConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialNode indicates an expected call of DialNode
func (mr *MockClusterMockRecorder) DialNode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialNode", reflect.TypeOf((*MockCluster)(nil).DialNode), arg0)
}
