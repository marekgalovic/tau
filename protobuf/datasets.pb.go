// Code generated by protoc-gen-go. DO NOT EDIT.
// source: datasets.proto

package tau

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BtreeIndexOptions struct {
	NumTrees     int32 `protobuf:"varint,1,opt,name=num_trees,json=numTrees" json:"num_trees,omitempty"`
	MaxLeafItems int32 `protobuf:"varint,2,opt,name=max_leaf_items,json=maxLeafItems" json:"max_leaf_items,omitempty"`
}

func (m *BtreeIndexOptions) Reset()                    { *m = BtreeIndexOptions{} }
func (m *BtreeIndexOptions) String() string            { return proto.CompactTextString(m) }
func (*BtreeIndexOptions) ProtoMessage()               {}
func (*BtreeIndexOptions) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *BtreeIndexOptions) GetNumTrees() int32 {
	if m != nil {
		return m.NumTrees
	}
	return 0
}

func (m *BtreeIndexOptions) GetMaxLeafItems() int32 {
	if m != nil {
		return m.MaxLeafItems
	}
	return 0
}

type VoronoiIndexOptions struct {
	SplitFactor  int32 `protobuf:"varint,1,opt,name=split_factor,json=splitFactor" json:"split_factor,omitempty"`
	MaxCellItems int32 `protobuf:"varint,2,opt,name=max_cell_items,json=maxCellItems" json:"max_cell_items,omitempty"`
}

func (m *VoronoiIndexOptions) Reset()                    { *m = VoronoiIndexOptions{} }
func (m *VoronoiIndexOptions) String() string            { return proto.CompactTextString(m) }
func (*VoronoiIndexOptions) ProtoMessage()               {}
func (*VoronoiIndexOptions) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *VoronoiIndexOptions) GetSplitFactor() int32 {
	if m != nil {
		return m.SplitFactor
	}
	return 0
}

func (m *VoronoiIndexOptions) GetMaxCellItems() int32 {
	if m != nil {
		return m.MaxCellItems
	}
	return 0
}

type Index struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Size   int32  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Metric string `protobuf:"bytes,3,opt,name=metric" json:"metric,omitempty"`
	// Types that are valid to be assigned to Options:
	//	*Index_Btree
	//	*Index_Voronoi
	Options isIndex_Options `protobuf_oneof:"options"`
}

func (m *Index) Reset()                    { *m = Index{} }
func (m *Index) String() string            { return proto.CompactTextString(m) }
func (*Index) ProtoMessage()               {}
func (*Index) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type isIndex_Options interface {
	isIndex_Options()
}

type Index_Btree struct {
	Btree *BtreeIndexOptions `protobuf:"bytes,4,opt,name=btree,oneof"`
}
type Index_Voronoi struct {
	Voronoi *VoronoiIndexOptions `protobuf:"bytes,5,opt,name=voronoi,oneof"`
}

func (*Index_Btree) isIndex_Options()   {}
func (*Index_Voronoi) isIndex_Options() {}

func (m *Index) GetOptions() isIndex_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *Index) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Index) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Index) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *Index) GetBtree() *BtreeIndexOptions {
	if x, ok := m.GetOptions().(*Index_Btree); ok {
		return x.Btree
	}
	return nil
}

func (m *Index) GetVoronoi() *VoronoiIndexOptions {
	if x, ok := m.GetOptions().(*Index_Voronoi); ok {
		return x.Voronoi
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Index) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Index_OneofMarshaler, _Index_OneofUnmarshaler, _Index_OneofSizer, []interface{}{
		(*Index_Btree)(nil),
		(*Index_Voronoi)(nil),
	}
}

func _Index_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Index)
	// options
	switch x := m.Options.(type) {
	case *Index_Btree:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Btree); err != nil {
			return err
		}
	case *Index_Voronoi:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Voronoi); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Index.Options has unexpected type %T", x)
	}
	return nil
}

func _Index_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Index)
	switch tag {
	case 4: // options.btree
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BtreeIndexOptions)
		err := b.DecodeMessage(msg)
		m.Options = &Index_Btree{msg}
		return true, err
	case 5: // options.voronoi
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VoronoiIndexOptions)
		err := b.DecodeMessage(msg)
		m.Options = &Index_Voronoi{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Index_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Index)
	// options
	switch x := m.Options.(type) {
	case *Index_Btree:
		s := proto.Size(x.Btree)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Index_Voronoi:
		s := proto.Size(x.Voronoi)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Dataset struct {
	Name          string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Path          string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	NumPartitions int32  `protobuf:"varint,3,opt,name=num_partitions,json=numPartitions" json:"num_partitions,omitempty"`
	NumReplicas   int32  `protobuf:"varint,4,opt,name=num_replicas,json=numReplicas" json:"num_replicas,omitempty"`
	Index         *Index `protobuf:"bytes,5,opt,name=index" json:"index,omitempty"`
	ZkPath        string `protobuf:"bytes,6,opt,name=zk_path,json=zkPath" json:"zk_path,omitempty"`
}

func (m *Dataset) Reset()                    { *m = Dataset{} }
func (m *Dataset) String() string            { return proto.CompactTextString(m) }
func (*Dataset) ProtoMessage()               {}
func (*Dataset) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *Dataset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Dataset) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Dataset) GetNumPartitions() int32 {
	if m != nil {
		return m.NumPartitions
	}
	return 0
}

func (m *Dataset) GetNumReplicas() int32 {
	if m != nil {
		return m.NumReplicas
	}
	return 0
}

func (m *Dataset) GetIndex() *Index {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *Dataset) GetZkPath() string {
	if m != nil {
		return m.ZkPath
	}
	return ""
}

type DatasetPartition struct {
	Id    int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Files []string `protobuf:"bytes,2,rep,name=files" json:"files,omitempty"`
}

func (m *DatasetPartition) Reset()                    { *m = DatasetPartition{} }
func (m *DatasetPartition) String() string            { return proto.CompactTextString(m) }
func (*DatasetPartition) ProtoMessage()               {}
func (*DatasetPartition) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *DatasetPartition) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DatasetPartition) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

func init() {
	proto.RegisterType((*BtreeIndexOptions)(nil), "tau.BtreeIndexOptions")
	proto.RegisterType((*VoronoiIndexOptions)(nil), "tau.VoronoiIndexOptions")
	proto.RegisterType((*Index)(nil), "tau.Index")
	proto.RegisterType((*Dataset)(nil), "tau.Dataset")
	proto.RegisterType((*DatasetPartition)(nil), "tau.DatasetPartition")
}

func init() { proto.RegisterFile("datasets.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0xdd, 0xb4, 0x3b, 0x8d, 0xb9, 0x5d, 0x83, 0x8e, 0xb2, 0x06, 0x7c, 0xa9, 0x41, 0xa1, 0x4f,
	0x79, 0x50, 0x1f, 0x7c, 0x5e, 0x45, 0x76, 0x41, 0x70, 0x19, 0x64, 0x1f, 0x0d, 0xd3, 0x64, 0x42,
	0x87, 0xce, 0x47, 0xc8, 0x4c, 0xa4, 0xf4, 0x87, 0x89, 0x3f, 0x4f, 0xe6, 0x4e, 0x5a, 0x90, 0xba,
	0x6f, 0xf7, 0x9e, 0x9c, 0x7b, 0x72, 0xce, 0xbd, 0x03, 0x79, 0xcb, 0x3d, 0x77, 0xc2, 0xbb, 0xaa,
	0x1f, 0xac, 0xb7, 0x74, 0xee, 0xf9, 0x58, 0x3e, 0xc0, 0xf3, 0x1b, 0x3f, 0x08, 0x71, 0x67, 0x5a,
	0xb1, 0xff, 0xde, 0x7b, 0x69, 0x8d, 0xa3, 0xaf, 0x21, 0x33, 0xa3, 0xae, 0x03, 0xee, 0x8a, 0x64,
	0x95, 0xac, 0x09, 0x7b, 0x62, 0x46, 0xfd, 0x23, 0xf4, 0xf4, 0x2d, 0xe4, 0x9a, 0xef, 0x6b, 0x25,
	0x78, 0x57, 0x4b, 0x2f, 0xb4, 0x2b, 0x66, 0xc8, 0xb8, 0xd2, 0x7c, 0xff, 0x4d, 0xf0, 0xee, 0x2e,
	0x60, 0xe5, 0x4f, 0x78, 0xf1, 0x60, 0x07, 0x6b, 0xac, 0xfc, 0x47, 0xf9, 0x0d, 0x5c, 0xb9, 0x5e,
	0x49, 0x5f, 0x77, 0xbc, 0xf1, 0x76, 0x98, 0xc4, 0x97, 0x88, 0x7d, 0x45, 0xe8, 0xa8, 0xdf, 0x08,
	0xa5, 0xce, 0xf4, 0x3f, 0x0b, 0xa5, 0xa2, 0xfe, 0x9f, 0x04, 0x08, 0x2a, 0x53, 0x0a, 0x97, 0x86,
	0x6b, 0x81, 0x52, 0x19, 0xc3, 0x3a, 0x60, 0x4e, 0x1e, 0xc4, 0x34, 0x89, 0x35, 0xbd, 0x86, 0x85,
	0x16, 0x7e, 0x90, 0x4d, 0x31, 0x47, 0xe6, 0xd4, 0xd1, 0x0a, 0xc8, 0x26, 0x24, 0x2d, 0x2e, 0x57,
	0xc9, 0x7a, 0xf9, 0xfe, 0xba, 0xf2, 0x7c, 0xac, 0xce, 0x76, 0x72, 0x7b, 0xc1, 0x22, 0x8d, 0x7e,
	0x84, 0xf4, 0x57, 0x4c, 0x56, 0x10, 0x9c, 0x28, 0x70, 0xe2, 0x3f, 0x69, 0x6f, 0x2f, 0xd8, 0x91,
	0x7a, 0x93, 0x41, 0x6a, 0x23, 0x5a, 0xfe, 0x4e, 0x20, 0xfd, 0x12, 0x4f, 0xf1, 0x98, 0xf9, 0x9e,
	0xfb, 0x2d, 0x9a, 0xcf, 0x18, 0xd6, 0xf4, 0x1d, 0xe4, 0xe1, 0x22, 0x3d, 0x1f, 0xbc, 0x44, 0x15,
	0x0c, 0x41, 0xd8, 0x53, 0x33, 0xea, 0xfb, 0x13, 0x18, 0xd6, 0x1b, 0x68, 0x83, 0xe8, 0x95, 0x6c,
	0xb8, 0xc3, 0x48, 0x84, 0x2d, 0xcd, 0xa8, 0xd9, 0x04, 0xd1, 0x15, 0x10, 0x19, 0x3c, 0x4e, 0xe6,
	0x01, 0xcd, 0xa3, 0x6b, 0x16, 0x3f, 0xd0, 0x57, 0x90, 0x1e, 0x76, 0x35, 0x5a, 0x58, 0xc4, 0x4d,
	0x1d, 0x76, 0xf7, 0xdc, 0x6f, 0xcb, 0x4f, 0xf0, 0x6c, 0xf2, 0x7d, 0xfa, 0x25, 0xcd, 0x61, 0x26,
	0xdb, 0xe9, 0x8c, 0x33, 0xd9, 0xd2, 0x97, 0x40, 0x3a, 0xa9, 0x44, 0x38, 0xda, 0x7c, 0x9d, 0xb1,
	0xd8, 0x6c, 0x16, 0xf8, 0xe2, 0x3e, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x86, 0xab, 0xd1, 0xcb,
	0x83, 0x02, 0x00, 0x00,
}
