// Code generated by protoc-gen-go. DO NOT EDIT.
// source: datasets.proto

package tau

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type IndexOptions struct {
	Size         int32  `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	Metric       string `protobuf:"bytes,2,opt,name=metric" json:"metric,omitempty"`
	MaxLeafItems int32  `protobuf:"varint,3,opt,name=max_leaf_items,json=maxLeafItems" json:"max_leaf_items,omitempty"`
	NumTrees     int32  `protobuf:"varint,4,opt,name=num_trees,json=numTrees" json:"num_trees,omitempty"`
	SplitFactor  int32  `protobuf:"varint,5,opt,name=split_factor,json=splitFactor" json:"split_factor,omitempty"`
}

func (m *IndexOptions) Reset()                    { *m = IndexOptions{} }
func (m *IndexOptions) String() string            { return proto.CompactTextString(m) }
func (*IndexOptions) ProtoMessage()               {}
func (*IndexOptions) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *IndexOptions) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *IndexOptions) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *IndexOptions) GetMaxLeafItems() int32 {
	if m != nil {
		return m.MaxLeafItems
	}
	return 0
}

func (m *IndexOptions) GetNumTrees() int32 {
	if m != nil {
		return m.NumTrees
	}
	return 0
}

func (m *IndexOptions) GetSplitFactor() int32 {
	if m != nil {
		return m.SplitFactor
	}
	return 0
}

type Dataset struct {
	Name  string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Index *IndexOptions `protobuf:"bytes,2,opt,name=index" json:"index,omitempty"`
}

func (m *Dataset) Reset()                    { *m = Dataset{} }
func (m *Dataset) String() string            { return proto.CompactTextString(m) }
func (*Dataset) ProtoMessage()               {}
func (*Dataset) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Dataset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Dataset) GetIndex() *IndexOptions {
	if m != nil {
		return m.Index
	}
	return nil
}

func init() {
	proto.RegisterType((*IndexOptions)(nil), "tau.IndexOptions")
	proto.RegisterType((*Dataset)(nil), "tau.Dataset")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DatasetsService service

type DatasetsServiceClient interface {
	List(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (DatasetsService_ListClient, error)
	Create(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*EmptyResponse, error)
	Delete(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type datasetsServiceClient struct {
	cc *grpc.ClientConn
}

func NewDatasetsServiceClient(cc *grpc.ClientConn) DatasetsServiceClient {
	return &datasetsServiceClient{cc}
}

func (c *datasetsServiceClient) List(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (DatasetsService_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DatasetsService_serviceDesc.Streams[0], c.cc, "/tau.DatasetsService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &datasetsServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DatasetsService_ListClient interface {
	Recv() (*Dataset, error)
	grpc.ClientStream
}

type datasetsServiceListClient struct {
	grpc.ClientStream
}

func (x *datasetsServiceListClient) Recv() (*Dataset, error) {
	m := new(Dataset)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *datasetsServiceClient) Create(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/tau.DatasetsService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetsServiceClient) Delete(ctx context.Context, in *Dataset, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/tau.DatasetsService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DatasetsService service

type DatasetsServiceServer interface {
	List(*EmptyRequest, DatasetsService_ListServer) error
	Create(context.Context, *Dataset) (*EmptyResponse, error)
	Delete(context.Context, *Dataset) (*EmptyResponse, error)
}

func RegisterDatasetsServiceServer(s *grpc.Server, srv DatasetsServiceServer) {
	s.RegisterService(&_DatasetsService_serviceDesc, srv)
}

func _DatasetsService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatasetsServiceServer).List(m, &datasetsServiceListServer{stream})
}

type DatasetsService_ListServer interface {
	Send(*Dataset) error
	grpc.ServerStream
}

type datasetsServiceListServer struct {
	grpc.ServerStream
}

func (x *datasetsServiceListServer) Send(m *Dataset) error {
	return x.ServerStream.SendMsg(m)
}

func _DatasetsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tau.DatasetsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).Create(ctx, req.(*Dataset))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dataset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tau.DatasetsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).Delete(ctx, req.(*Dataset))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatasetsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tau.DatasetsService",
	HandlerType: (*DatasetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DatasetsService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DatasetsService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _DatasetsService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "datasets.proto",
}

func init() { proto.RegisterFile("datasets.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4a, 0x33, 0x41,
	0x10, 0xc5, 0xe9, 0x2f, 0x7f, 0x3e, 0x53, 0x19, 0x22, 0xd6, 0x42, 0x86, 0xb8, 0x89, 0x41, 0x30,
	0xba, 0x08, 0x12, 0x8f, 0x60, 0x0c, 0x04, 0x02, 0xc2, 0xe8, 0x7e, 0x68, 0x27, 0x15, 0x68, 0x48,
	0x77, 0x8f, 0x5d, 0x35, 0x12, 0x3d, 0x87, 0x07, 0xf0, 0xa8, 0x32, 0x3d, 0xb3, 0x88, 0x3b, 0x77,
	0x55, 0xbf, 0x7a, 0xaf, 0x79, 0x8f, 0x86, 0xd1, 0x56, 0x8b, 0x66, 0x12, 0x9e, 0x97, 0xc1, 0x8b,
	0xc7, 0x8e, 0xe8, 0x6a, 0x0c, 0x85, 0x0f, 0xd4, 0x80, 0xe9, 0xb7, 0x82, 0x64, 0xed, 0xb6, 0x74,
	0x78, 0x2a, 0xc5, 0x78, 0xc7, 0x88, 0xd0, 0x65, 0xf3, 0x49, 0xa9, 0x9a, 0xa8, 0x59, 0x2f, 0x8b,
	0x33, 0x9e, 0x43, 0xdf, 0x92, 0x04, 0x53, 0xa4, 0xff, 0x26, 0x6a, 0x36, 0xc8, 0xda, 0x0d, 0xaf,
	0x60, 0x64, 0xf5, 0x21, 0xdf, 0x93, 0xde, 0xe5, 0x46, 0xc8, 0x72, 0xda, 0x89, 0xae, 0xc4, 0xea,
	0xc3, 0x86, 0xf4, 0x6e, 0x5d, 0x33, 0xbc, 0x80, 0x81, 0xab, 0x6c, 0x2e, 0x81, 0x88, 0xd3, 0x6e,
	0x14, 0x9c, 0xb8, 0xca, 0xbe, 0xd4, 0x3b, 0x5e, 0x42, 0xc2, 0xe5, 0xde, 0x48, 0xbe, 0xd3, 0x85,
	0xf8, 0x90, 0xf6, 0xe2, 0x7d, 0x18, 0xd9, 0x2a, 0xa2, 0xe9, 0x0a, 0xfe, 0x2f, 0x9b, 0x16, 0x75,
	0x38, 0xa7, 0x6d, 0x13, 0x6e, 0x90, 0xc5, 0x19, 0xaf, 0xa1, 0x67, 0xea, 0x02, 0x31, 0xdb, 0x70,
	0x71, 0x36, 0x17, 0x5d, 0xcd, 0x8f, 0x2b, 0x65, 0xcd, 0x7d, 0xf1, 0xa5, 0xe0, 0xb4, 0x7d, 0x88,
	0x9f, 0x29, 0xbc, 0x9b, 0x82, 0xf0, 0x06, 0xba, 0x1b, 0xc3, 0x82, 0x8d, 0xeb, 0xd1, 0x96, 0xf2,
	0x91, 0xd1, 0x5b, 0x45, 0x2c, 0xe3, 0x24, 0xa2, 0xd6, 0x70, 0xa7, 0xf0, 0x16, 0xfa, 0x0f, 0x81,
	0xb4, 0x10, 0xfe, 0xba, 0x8c, 0xf1, 0xd8, 0xca, 0xa5, 0x77, 0x4c, 0xb5, 0x76, 0x49, 0x7b, 0xfa,
	0x8b, 0xf6, 0xb5, 0x1f, 0x3f, 0xe2, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x43, 0xde, 0x97,
	0xab, 0x01, 0x00, 0x00,
}
