// Code generated by MockGen. DO NOT EDIT.
// Source: utils/zookeeper.go

// Package utils is a generated GoMock package.
package utils

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	zk "github.com/samuel/go-zookeeper/zk"
	reflect "reflect"
)

// MockZookeeper is a mock of Zookeeper interface
type MockZookeeper struct {
	ctrl     *gomock.Controller
	recorder *MockZookeeperMockRecorder
}

// MockZookeeperMockRecorder is the mock recorder for MockZookeeper
type MockZookeeperMockRecorder struct {
	mock *MockZookeeper
}

// NewMockZookeeper creates a new mock instance
func NewMockZookeeper(ctrl *gomock.Controller) *MockZookeeper {
	mock := &MockZookeeper{ctrl: ctrl}
	mock.recorder = &MockZookeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZookeeper) EXPECT() *MockZookeeperMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockZookeeper) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockZookeeperMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockZookeeper)(nil).Close))
}

// Children mocks base method
func (m *MockZookeeper) Children(arg0 string) ([]string, error) {
	ret := m.ctrl.Call(m, "Children", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Children indicates an expected call of Children
func (mr *MockZookeeperMockRecorder) Children(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Children", reflect.TypeOf((*MockZookeeper)(nil).Children), arg0)
}

// ChildrenW mocks base method
func (m *MockZookeeper) ChildrenW(arg0 string) ([]string, <-chan zk.Event, error) {
	ret := m.ctrl.Call(m, "ChildrenW", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(<-chan zk.Event)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChildrenW indicates an expected call of ChildrenW
func (mr *MockZookeeperMockRecorder) ChildrenW(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChildrenW", reflect.TypeOf((*MockZookeeper)(nil).ChildrenW), arg0)
}

// ChildrenChanges mocks base method
func (m *MockZookeeper) ChildrenChanges(arg0 context.Context, arg1 string) (<-chan ChildrenChangedEvent, <-chan error) {
	ret := m.ctrl.Call(m, "ChildrenChanges", arg0, arg1)
	ret0, _ := ret[0].(<-chan ChildrenChangedEvent)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// ChildrenChanges indicates an expected call of ChildrenChanges
func (mr *MockZookeeperMockRecorder) ChildrenChanges(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChildrenChanges", reflect.TypeOf((*MockZookeeper)(nil).ChildrenChanges), arg0, arg1)
}

// Create mocks base method
func (m *MockZookeeper) Create(arg0 string, arg1 []byte, arg2 int32) (string, error) {
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockZookeeperMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockZookeeper)(nil).Create), arg0, arg1, arg2)
}

// CreateProtectedEphemeralSequential mocks base method
func (m *MockZookeeper) CreateProtectedEphemeralSequential(arg0 string, arg1 []byte) (string, error) {
	ret := m.ctrl.Call(m, "CreateProtectedEphemeralSequential", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProtectedEphemeralSequential indicates an expected call of CreateProtectedEphemeralSequential
func (mr *MockZookeeperMockRecorder) CreateProtectedEphemeralSequential(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProtectedEphemeralSequential", reflect.TypeOf((*MockZookeeper)(nil).CreateProtectedEphemeralSequential), arg0, arg1)
}

// CreatePath mocks base method
func (m *MockZookeeper) CreatePath(arg0 string, arg1 []byte, arg2 int32) (string, error) {
	ret := m.ctrl.Call(m, "CreatePath", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePath indicates an expected call of CreatePath
func (mr *MockZookeeperMockRecorder) CreatePath(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePath", reflect.TypeOf((*MockZookeeper)(nil).CreatePath), arg0, arg1, arg2)
}

// Delete mocks base method
func (m *MockZookeeper) Delete(arg0 string) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockZookeeperMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockZookeeper)(nil).Delete), arg0)
}

// DeleteRecursive mocks base method
func (m *MockZookeeper) DeleteRecursive(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteRecursive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecursive indicates an expected call of DeleteRecursive
func (mr *MockZookeeperMockRecorder) DeleteRecursive(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecursive", reflect.TypeOf((*MockZookeeper)(nil).DeleteRecursive), arg0)
}

// Exists mocks base method
func (m *MockZookeeper) Exists(arg0 string) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockZookeeperMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockZookeeper)(nil).Exists), arg0)
}

// ExistsW mocks base method
func (m *MockZookeeper) ExistsW(arg0 string) (bool, <-chan zk.Event, error) {
	ret := m.ctrl.Call(m, "ExistsW", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(<-chan zk.Event)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExistsW indicates an expected call of ExistsW
func (mr *MockZookeeperMockRecorder) ExistsW(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsW", reflect.TypeOf((*MockZookeeper)(nil).ExistsW), arg0)
}

// Get mocks base method
func (m *MockZookeeper) Get(arg0 string) ([]byte, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockZookeeperMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockZookeeper)(nil).Get), arg0)
}

// GetW mocks base method
func (m *MockZookeeper) GetW(arg0 string) ([]byte, <-chan zk.Event, error) {
	ret := m.ctrl.Call(m, "GetW", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(<-chan zk.Event)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetW indicates an expected call of GetW
func (mr *MockZookeeperMockRecorder) GetW(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetW", reflect.TypeOf((*MockZookeeper)(nil).GetW), arg0)
}

// Multi mocks base method
func (m *MockZookeeper) Multi(arg0 ...interface{}) error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Multi", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Multi indicates an expected call of Multi
func (mr *MockZookeeperMockRecorder) Multi(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Multi", reflect.TypeOf((*MockZookeeper)(nil).Multi), arg0...)
}
